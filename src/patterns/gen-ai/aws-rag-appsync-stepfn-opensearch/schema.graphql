type FileStatus @aws_api_key @aws_cognito_user_pools {
	name: String
	status: String
}

input FileStatusInput {
	name: String
	status: String
}

type IngestionDocs @aws_api_key @aws_cognito_user_pools {
	ingestionjobid: ID
	files: [FileStatus]
}

input IngestionDocsInput {
	ingestionjobid: ID
	files: [FileStatusInput]
}

type S3Fields @aws_api_key @aws_cognito_user_pools {
	key: String
	accessKeyId: String
	securityToken: String
	policy: String
	signature: String
}

type S3Object @aws_api_key @aws_cognito_user_pools {
	bucket: String
	key: String
	region: String
	uploadUrl: String
}

input S3ObjectInput {
	bucket: String
	key: String
	region: String
	uploadUrl: String
}

type S3ObjectResponse @aws_api_key @aws_cognito_user_pools {
	url: String
	fields: S3Fields
}

type Mutation @aws_api_key @aws_cognito_user_pools {
	ingestDocuments(ingestioninput: IngestionDocsInput!): IngestionDocs
	updateIngestionJobStatus(ingestionjobid: ID, files: [FileStatusInput]): IngestionDocs
	presignedUrl(s3signedparams: S3ObjectInput!): S3ObjectResponse
}

type Query @aws_api_key @aws_cognito_user_pools {
	ingest: IngestionDocs
}

type Subscription @aws_api_key @aws_cognito_user_pools {
	ingestDocuments(ingestionjobid: ID!): IngestionDocs
		@aws_subscribe(mutations: ["ingestDocuments"])
	updateIngestionJobStatus(ingestionjobid: ID!): IngestionDocs
		@aws_subscribe(mutations: ["updateIngestionJobStatus"])
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
