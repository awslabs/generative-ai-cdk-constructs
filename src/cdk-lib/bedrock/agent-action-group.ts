/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import * as cdk from 'aws-cdk-lib';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import { NagSuppressions } from 'cdk-nag';
import { Construct } from 'constructs';

import { Agent } from './agent';
import { ApiSchema, ApiSchemaConfig } from './api-schema';
import { BedrockCRProvider } from './custom-resource-provider';

import { generatePhysicalNameV2 } from '../../common/helpers/utils';

export interface AgentActionGroupProps {
  /**
   * Bedrock Agent
   */
  readonly agent: Agent;
  /**
   * The Lambda function containing the business logic that is carried out upon invoking the action.
   */
  readonly actionGroupExecutor?: lambda.IFunction;
  /**
   * The name of the action group.
   *
   * @default - a name is generated by CloudFormation.
   */
  readonly actionGroupName?: string;
  /**
   * Specifies whether the action group is available for the agent to invoke or not when sending an InvokeAgent request.
   */
  readonly actionGroupState?: 'ENABLED' | 'DISABLED';
  /**
   * Contains details about the S3 object containing the OpenAPI schema for the action group. For more information, see
   * [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html).
   */
  readonly apiSchema?: ApiSchema;
  /**
   * A description of the action group.
   *
   * @note This object is a Union. Only one member of this object can be specified or returned.
   */
  readonly description?: string;
  /**
   * If you specify this value as AMAZON.UserInput, the agent will prompt additional information from the user when it
   * doesn't have enough information to respond to an utterance. Leave this field blank if you don't want the agent to
   * prompt additional information.
   */
  readonly parentActionGroupSignature?: 'AMAZON.UserInput';

}

interface ActionGroupExecutor {
  readonly lambda?: string;
}

export class AgentActionGroup extends Construct {
  /**
   * The unique identifier of the action group.
   */
  public readonly actionGroupId: string;

  constructor(scope: Construct, id: string, props: AgentActionGroupProps) {
    super(scope, id);

    validateAgentActionGroupProps(props);

    const apiSchema = props.apiSchema?.bind(this);
    validateApiSchema(apiSchema);

    const actionGroupName = props.actionGroupName ?? generatePhysicalNameV2(
      this,
      'action-group',
      { maxLength: 100, separator: '-' });

    let actionGroupExecutor: ActionGroupExecutor | undefined = undefined;
    if (props.actionGroupExecutor?.functionArn) {
      actionGroupExecutor = { lambda: props.actionGroupExecutor.functionArn };
      props.actionGroupExecutor.addPermission('AgentLambdaInvocationPolicy', {
        principal: new iam.ServicePrincipal('bedrock.amazonaws.com'),
        sourceArn: props.agent.agentArn,
        sourceAccount: cdk.Stack.of(this).account,
      });
    }

    const crProvider = BedrockCRProvider.getProvider(this);
    const agentActionGroup = new cdk.CustomResource(this, 'ActionGroup', {
      serviceToken: crProvider.serviceToken,
      resourceType: 'Custom::Bedrock-AgentActionGroup',
      properties: {
        agentId: props.agent.agentId,
        actionGroupExecutor,
        actionGroupName,
        actionGroupState: props.actionGroupState,
        apiSchema,
        description: props.description,
        parentActionGroupSignature: props.parentActionGroupSignature,
      },
    });
    this.actionGroupId = agentActionGroup.getAttString('actionGroupId');

    const actionGroupCRPolicy = new iam.Policy(this, 'AgentActionGroupCRPolicy', {
      roles: [crProvider.role],
      statements: [
        new iam.PolicyStatement({
          actions: [
            'bedrock:CreateAgentActionGroup',
            'bedrock:DeleteAgentActionGroup',
            'bedrock:UpdateAgentActionGroup',
          ],
          resources: [
            cdk.Stack.of(this).formatArn({
              service: 'bedrock',
              resource: 'agent',
              resourceName: '*',
              arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
            }),
          ],
        }),
      ],
    });

    NagSuppressions.addResourceSuppressions(
      actionGroupCRPolicy,
      [
        {
          id: 'AwsSolutions-IAM5',
          reason: 'Bedrock AgentActionGroup calls have wildcards restricted to agents in the account.',
        },
      ],
      true,
    );

    agentActionGroup.node.addDependency(actionGroupCRPolicy);
    props.agent._addPrepareAgentDependency(agentActionGroup, agentActionGroup.getAttString('updatedAt'));
  }
}

function validateAgentActionGroupProps(props: AgentActionGroupProps) {
  if (props.parentActionGroupSignature && props.description) {
    throw new Error('Cannot specify both description and parentActionSignature');
  }
}

function validateApiSchema(apiSchema: ApiSchemaConfig | undefined) {
  // mutually exclusive
  if (apiSchema?.payload && apiSchema?.s3) {
    throw new Error('Cannot specify both apiSchema.payload and apiSchema.s3');
  }
}