/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import { Construct } from "constructs";
import * as iam from "aws-cdk-lib/aws-iam";
import * as kms from "aws-cdk-lib/aws-kms";
import * as bedrock from "aws-cdk-lib/aws-bedrock";
import { ArnFormat, Duration, IResource, Lazy, Resource, Stack } from "aws-cdk-lib";
import { IInvokable } from "../models";
import { IKnowledgeBase } from "../knowledge-base";
import { IGuardrail } from "../guardrails/guardrails";
import { generatePhysicalNameV2 } from "../../../common/helpers/utils";
import { validateStringFieldLength } from "../../../common/helpers/validation-helpers";
import { AgentAlias, IAgentAlias } from "./agent-alias";

/******************************************************************************
 *                              COMMON
 *****************************************************************************/
/**
 * Represents an Agent, either created with CDK or imported.
 */
export interface IAgent extends IResource {
  /**
   * The ARN of the agent.
   * @example "arn:aws:bedrock:us-east-1:123456789012:agent/OKDSJOGKMO"
   * @attribute
   */
  readonly agentArn: string;
  /**
   * The ID of the Agent.
   * @example "OKDSJOGKMO"
   * @attribute
   */
  readonly agentId: string;
  /**
   * The IAM role associated to the agent.
   */
  readonly role: iam.IRole;
  /**
   * Optional KMS encryption key associated with this agent
   */
  readonly kmsKey?: kms.IKey;
  /**
   * When this agent was last updated.
   */
  readonly lastUpdated?: string;
}
/******************************************************************************
 *                        ABSTRACT BASE CLASS
 *****************************************************************************/
/**
 * Abstract base class for an Agent.
 * Contains methods and attributes valid for Agents either created with CDK or imported.
 */
export abstract class AgentBase extends Resource implements IAgent {
  public abstract readonly agentArn: string;
  public abstract readonly agentId: string;
  public abstract readonly role: iam.IRole;
  public abstract readonly kmsKey?: kms.IKey;
  public abstract readonly lastUpdated?: string;
  public abstract agentVersion: string;
}

/******************************************************************************
 *                        PROPS FOR NEW CONSTRUCT
 *****************************************************************************/
/**
 * Properties for creating a CDK managed Bedrock Agent.
 */
export interface AgentProps {
  /**
   * The name of the agent.
   *
   * @default - A name is generated by CDK.
   */
  readonly name?: string;
  /**
   * The instruction used by the agent.
   */
  readonly instruction: string;
  /**
   * The foundation model used for orchestration by the agent.
   */
  readonly foundationModel: IInvokable;
  /**
   * The existing IAM Role for the agent to use.
   * Ensure the role has a trust policy that allows the Bedrock service to assume the role.
   *
   * @default - A new role is created for you.
   */
  readonly existingRole?: iam.IRole;
  /**
   * Specifies whether to automatically update the `DRAFT` version of the agent after
   * making changes to the agent. The `DRAFT` version can be continually iterated
   * upon during internal development.
   *
   * @default - false
   */
  readonly shouldPrepareAgent?: boolean;
  /**
   * How long sessions should be kept open for the agent. If no conversation occurs
   * during this time, the session expires and Amazon Bedrock deletes any data
   * provided before the timeout.
   *
   * @default - 1 hour
   */
  readonly idleSessionTTL?: Duration;
  /**
   * The KMS key of the agent if custom encryption is configured.
   *
   * @default - An AWS managed key is used.
   */
  readonly kmsKey?: kms.IKey;
  /**
   * A description of the agent.
   *
   * @default - No description is provided.
   */
  readonly description?: string;
  /**
   * The KnowledgeBases associated with the agent.
   */
  readonly knowledgeBases?: KnowledgeBaseAgentAssociation[];
  /**
   * The guardrail associated with the agent.
   */
  readonly guardrail?: IGuardrail;
  /**
   * Overrides some prompt templates in different parts of an agent sequence configuration.
   *
   * @default - No overrides are provided.
   */
  // readonly promptOverrideConfiguration?: ;
}
/******************************************************************************
 *                      ATTRS FOR IMPORTED CONSTRUCT
 *****************************************************************************/
/**
 * Attributes for specifying an imported Bedrock Agent.
 */

/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create (or import) an Agent with CDK.
 */
export class Agent extends AgentBase {
  // ------------------------------------------------------
  // Base attributes
  // ------------------------------------------------------
  /**
   * The unique identifier for the agent
   */
  public readonly agentId: string;
  /**
   * The ARN of the agent.
   */
  public readonly agentArn: string;
  /**
   * The version of the agent.
   */
  public readonly agentVersion: string;
  /**
   * The IAM role associated to the agent.
   */
  public readonly role: iam.IRole;
  /**
   * Optional KMS encryption key associated with this agent
   */
  public readonly kmsKey?: kms.IKey;
  /**
   * When this agent was last updated.
   */
  public readonly lastUpdated?: string;
  // ------------------------------------------------------
  // CDK-only attributes
  // ------------------------------------------------------
  /**
   * The name of the agent.
   */
  public readonly name: string;
  /**
   * The instruction used by the agent.
   */
  public readonly instruction?: string;
  /**
   * Whether the model
   */
  public readonly shouldPrepareAgent: boolean;
  /**
   * How long sessions should be kept open for the agent.
   */
  public readonly idleSessionTTL: Duration;
  /**
   * The foundation model used for orchestration by the agent.
   */
  public readonly foundationModel: IInvokable;
  /**
   * The default alias for this agent. This corresponds to the test alias
   * (`TSTALIASID`) that points to the working (`DRAFT`) version.
   */
  public readonly defaultAlias: IAgentAlias;
  /**
   * The action groups associated with the agent.
   */
  //public actionGroups?: ActionGroups[];
  /**
   * The KnowledgeBases associated with the agent.
   */
  public knowledgeBaseAssociations: KnowledgeBaseAgentAssociation[];
  /**
   * The guardrail associated with the agent.
   */
  public guardrail?: IGuardrail;
  /**
   * The L1 representation of the agent
   */
  private readonly __resource: bedrock.CfnAgent;

  // ------------------------------------------------------
  // CONSTRUCTOR
  // ------------------------------------------------------
  constructor(scope: Construct, id: string, props: AgentProps) {
    super(scope, id);

    // ------------------------------------------------------
    // Set properties or defaults
    // ------------------------------------------------------
    this.name =
      props.name ?? generatePhysicalNameV2(this, "bedrock-agent", { maxLength: 32, lower: true, separator: "-" });
    this.idleSessionTTL = props.idleSessionTTL ?? Duration.hours(1);
    this.shouldPrepareAgent = props.shouldPrepareAgent ?? false;
    this.knowledgeBaseAssociations = props.knowledgeBases ?? [];
    this.foundationModel = props.foundationModel;
    this.guardrail = props.guardrail;

    // ------------------------------------------------------
    // Role
    // ------------------------------------------------------
    // If existing role is provided, use it.
    if (props.existingRole) {
      this.role = props.existingRole;
      // Otherwise, create a new one
    } else {
      this.role = new iam.Role(this, "Role", {
        // generate a role name
        roleName: generatePhysicalNameV2(this, "AmazonBedrockExecutionRoleForAgents_", { maxLength: 64, lower: false }),
        // ensure the role has a trust policy that allows the Bedrock service to assume the role
        assumedBy: new iam.ServicePrincipal("bedrock.amazonaws.com").withConditions({
          StringEquals: {
            "aws:SourceAccount": Stack.of(this).account,
          },
          ArnLike: {
            "aws:SourceArn": Stack.of(this).formatArn({
              service: "bedrock",
              resource: "agent",
              resourceName: "*",
              arnFormat: ArnFormat.SLASH_RESOURCE_NAME,
            }),
          },
        }),
      });
      // add the appropriate permissions to use the FM
      this.foundationModel.grantInvoke(this.role);
    }

    // ------------------------------------------------------
    // CFN Props - With Lazy support
    // ------------------------------------------------------
    const cfnProps: bedrock.CfnAgentProps = {
      agentName: this.name,
      agentResourceRoleArn: this.role.roleArn,
      autoPrepare: this.shouldPrepareAgent,
      customerEncryptionKeyArn: props.kmsKey?.keyArn,
      description: props.description,
      foundationModel: this.foundationModel.invokableArn,
      idleSessionTtlInSeconds: this.idleSessionTTL.toSeconds(),
      instruction: props.instruction,
      knowledgeBases: Lazy.any({ produce: () => this.renderKnowledgeBases() }, { omitEmptyArray: true }),
      guardrailConfiguration: Lazy.any({ produce: () => this.renderGuardrail() }),
    };

    // ------------------------------------------------------
    // L1 Instantiation
    // ------------------------------------------------------
    this.__resource = new bedrock.CfnAgent(this, "AgentResource", cfnProps);

    this.agentId = this.__resource.attrAgentArn;
    this.agentArn = this.__resource.attrAgentId;
    this.agentVersion = this.__resource.attrAgentVersion;
    this.lastUpdated = this.__resource.attrUpdatedAt;
    this.defaultAlias = AgentAlias.fromAttibutes(this, "DefaultAlias", {
      aliasId: "TSTALIASID",
      aliasName: "AgentTestAlias",
      agentVersion: "DRAFT",
      agent: this,
    });
  }

  /**
   * Add knowledge base to the agent.
   */
  public addKnowledgeBase(kb: IKnowledgeBase, config?: KnowledgeBaseAgentAssociationConfig) {
    const association: KnowledgeBaseAgentAssociation = {
      knowledgeBase: kb,
      instructionForAgent: config?.instructionForAgent,
      enabled: config?.enabled,
    };
    // Do some checks
    this.validateKnowledgeBaseAssocation(association);
    // Add it to the array
    this.knowledgeBaseAssociations.push(association);
    // Add the appropriate Permissions to query the Knowledge Base
    kb.grantQuery(this.role);
  }

  /**
   * Add guardrail to the agent.
   */
  public addGuardrail(guardrail: IGuardrail) {
    // If has been defined in the constructor
    if (this.guardrail) {
      new Error("Guardrail has already been defined for this agent.");
    } else {
      this.guardrail = guardrail;
    }
    // Handle permissions
    guardrail.grantApply(this.role);
    guardrail.kmsKey?.grantDecrypt(this.role);
  }

  // ------------------------------------------------------
  // Lazy Renderers
  // ------------------------------------------------------
  /**
   * Render the guardrail configuration.
   *
   * @internal This is an internal core function and should not be called directly.
   */
  private renderGuardrail(): bedrock.CfnAgent.GuardrailConfigurationProperty | undefined {
    return this.guardrail
      ? {
          guardrailIdentifier: this.guardrail?.guardrailId,
          guardrailVersion: this.guardrail?.guardrailVersion,
        }
      : undefined;
  }

  /**
   * Render the knowledge base associations.
   *
   * @internal This is an internal core function and should not be called directly.
   */
  private renderKnowledgeBases(): bedrock.CfnAgent.AgentKnowledgeBaseProperty[] {
    const knowledgeBaseAssociationsCfn: bedrock.CfnAgent.AgentKnowledgeBaseProperty[] = [];
    // Build the associations in the CFN format
    this.knowledgeBaseAssociations.forEach((kb) => {
      knowledgeBaseAssociationsCfn.push({
        knowledgeBaseId: kb.knowledgeBase.knowledgeBaseId,
        knowledgeBaseState: kb.enabled ?? true ? "ENABLED" : "DISABLED",
        description: kb.instructionForAgent ?? kb.knowledgeBase.description!,
      });
    });
    return knowledgeBaseAssociationsCfn;
  }

  // ------------------------------------------------------
  // Validators
  // ------------------------------------------------------
  /**
   * Checks if the KB Association is valid
   *
   * @internal This is an internal core function and should not be called directly.
   */
  private validateKnowledgeBaseAssocation(association: KnowledgeBaseAgentAssociation) {
    const MAX_LENGTH = 200;
    const description = association.instructionForAgent ?? association.knowledgeBase.description;
    // If at least one of the previous has been defined
    if (description) {
      validateStringFieldLength({
        value: description,
        fieldName: "description",
        minLength: 0,
        maxLength: MAX_LENGTH,
      });
    } else {
      throw new Error(
        `If instructionForAgent is not provided, the description property of the KnowledgeBase ` +
          `${association.knowledgeBase.knowledgeBaseId} must be provided.`
      );
    }
  }
}
/******************************************************************************
 *                              COMMON
 *****************************************************************************/

export interface KnowledgeBaseAgentAssociationConfig {
  /**
   * Use this property to specify instructions based on the design and type of
   * information of the Knowledge Base. This will impact how the Knowledge Base
   * interacts with the agent.
   *
   * @default - "If available, the description property of the KB will be used. Else an error is thrown."
   */
  readonly instructionForAgent?: string;
  /**
   * Specifies whether to use the knowledge base or not when sending an InvokeAgent request.
   *
   * @default - true
   */
  readonly enabled?: boolean;
}

export interface KnowledgeBaseAgentAssociation extends KnowledgeBaseAgentAssociationConfig {
  /**
   * The Knowledge Base to associate with the agent.
   */
  readonly knowledgeBase: IKnowledgeBase;
}
