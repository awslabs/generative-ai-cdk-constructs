enum ModelProvider {
	Sagemaker
	Bedrock
}
enum Modality {
	Image
	Text
}

input ModelConfiguration {
	provider: ModelProvider
	modelId: String
	modality: Modality
	streaming: Boolean
	model_kwargs: AWSJSON
}
type QADocs @aws_iam
@aws_cognito_user_pools {
	jobid: ID
	question: String
	verbose: Boolean
	filename: String
	answer: String
	sources: [String]
	jobstatus: String
	responseGenerationMethod: ResponseGenerationMethod
}
input QADocsInput {
	jobid: ID
	question: String
	qa_model: ModelConfiguration
	embeddings_model: ModelConfiguration
	retrieval: RetrievalConfiguration
	filename: String
	presignedurl: String
	url: String
	verbose: Boolean
	responseGenerationMethod: ResponseGenerationMethod
}
enum ResponseGenerationMethod {
	LONG_CONTEXT
	RAG
}
input RetrievalConfiguration {
	max_docs: Int
	index_name: String
	filter_filename: String
}
type Mutation @aws_iam
@aws_cognito_user_pools {
	postQuestion(
		jobid: ID,
		jobstatus: String,
		qa_model: ModelConfiguration,
		embeddings_model: ModelConfiguration,
		retrieval: RetrievalConfiguration,
		filename: String,
		presignedurl: String,
		question: String,
		verbose: Boolean,
		responseGenerationMethod: ResponseGenerationMethod
	): QADocs
	updateQAJobStatus(
		jobid: ID,
		jobstatus: String,
		sources: [String],
		answer: String,
		filename: String,
		question: String
	): QADocs
}
type Query @aws_iam
@aws_cognito_user_pools {
	getAnswer(answerparams: QADocsInput!): QADocs
}
type Subscription @aws_iam
@aws_cognito_user_pools {
	updateQAJobStatus(jobid: ID!): QADocs
		@aws_subscribe(mutations: ["updateQAJobStatus"])
}
schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
	}