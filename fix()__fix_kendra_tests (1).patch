Subject: [PATCH] fix(): fix kendra tests
---
Index: src/common/helpers/kendra-utils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/common/helpers/kendra-utils.ts b/src/common/helpers/kendra-utils.ts
--- a/src/common/helpers/kendra-utils.ts	(revision 227561dd4a31b6367a8cf725366b3c47bcc71465)
+++ b/src/common/helpers/kendra-utils.ts	(date 1711973875937)
@@ -14,7 +14,7 @@
 import { Construct } from 'constructs';
 import { isPlainObject } from './utils';
 // https://github.com/webpack/webpack/issues/6584
-// eslint-disable-next-line @typescript-eslint/no-require-imports
+// eslint-disable-next-line @typescript-eslint/no-require-imports,import/no-extraneous-dependencies
 const merge = require('deepmerge');
 
 /**
@@ -48,8 +48,7 @@
   // Override the sensible defaults with user provided props
   if (concatArray) {
     return merge(DefaultProps, userProps, {
-      arrayMerge: (destinationArray: any[], sourceArray: any[]) => destinationArray.concat(sourceArray),
-      isMergeableObject: isPlainObject,
+      arrayMerge: (destinationArray: any[], sourceArray: any[]) => [...destinationArray, ...sourceArray],
     });
   } else {
     return merge(DefaultProps, userProps, {
Index: test/common/helpers/utils.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/common/helpers/utils.test.ts b/test/common/helpers/utils.test.ts
--- a/test/common/helpers/utils.test.ts	(revision 227561dd4a31b6367a8cf725366b3c47bcc71465)
+++ b/test/common/helpers/utils.test.ts	(date 1711970102374)
@@ -10,12 +10,18 @@
  *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
  *  and limitations under the License.
  */
+import { isObject } from 'util';
 import * as cdk from 'aws-cdk-lib';
 import { Construct } from 'constructs';
-import { generatePhysicalName, generatePhysicalNameV2,
-  isPlainObject, lambdaMemorySizeLimiter, maximumLambdaMemorySizeContextItem, recommendedMaximumLambdaMemorySize } from '../../../src/common/helpers/utils';
-import {addCfnSuppressRules} from "../../../lib/common/helpers/utils";
-import { isObject } from 'util';
+import {
+  generatePhysicalName,
+  generatePhysicalNameV2,
+  isPlainObject,
+  lambdaMemorySizeLimiter,
+  maximumLambdaMemorySizeContextItem,
+  recommendedMaximumLambdaMemorySize,
+  addCfnSuppressRules,
+} from '../../../src/common/helpers/utils';
 
 describe('lambdaMemorySizeLimiter', () => {
   let testConstruct: TestConstruct;
@@ -276,7 +282,7 @@
   });
 
 
-  describe("kendra general utils", () => {
+  describe('kendra general utils', () => {
     describe('addCfnSuppressRules', () => {
       it('should add suppression rules to a resource without existing rules', () => {
         const stack = new cdk.Stack();
@@ -344,4 +350,4 @@
 });
 
 class TestResource extends cdk.Resource {}
-class TestConstruct extends Construct {}
\ No newline at end of file
+class TestConstruct extends Construct {}
Index: test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/kendra-utils.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/kendra-utils.test.ts b/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/kendra-utils.test.ts
--- a/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/kendra-utils.test.ts	(revision 227561dd4a31b6367a8cf725366b3c47bcc71465)
+++ b/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/kendra-utils.test.ts	(date 1711973896334)
@@ -1,8 +1,19 @@
-import {consolidateProps, overrideProps} from "../../../../lib/common/helpers/kendra-helper";
-import {LambdaInvoke} from "aws-cdk-lib/aws-stepfunctions-tasks";
-import {getStepFnLambdaInvoke} from "../../../../src/common/helpers/kendra-utils";
-import {Stack} from "aws-cdk-lib/core";
-import {Function, Code, Runtime} from "aws-cdk-lib/aws-lambda";
+/**
+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
+ *  with the License. A copy of the License is located at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
+ *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
+ *  and limitations under the License.
+ */
+import { Function, Code, Runtime } from 'aws-cdk-lib/aws-lambda';
+import { LambdaInvoke } from 'aws-cdk-lib/aws-stepfunctions-tasks';
+import { Stack } from 'aws-cdk-lib/core';
+import { getStepFnLambdaInvoke, consolidateProps, overrideProps } from '../../../../src/common/helpers/kendra-utils';
 
 describe('Kendra Utilities', () => {
   describe('getStepFnLambdaInvoke', () => {
Index: test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/vpc-helper.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/vpc-helper.test.ts b/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/vpc-helper.test.ts
--- a/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/vpc-helper.test.ts	(revision 227561dd4a31b6367a8cf725366b3c47bcc71465)
+++ b/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/vpc-helper.test.ts	(date 1711974012879)
@@ -1,10 +1,20 @@
+/**
+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
+ *  with the License. A copy of the License is located at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
+ *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
+ *  and limitations under the License.
+ */
 import { App, Stack } from 'aws-cdk-lib';
+import { Match, Template } from 'aws-cdk-lib/assertions';
 import { Vpc } from 'aws-cdk-lib/aws-ec2';
-// import { buildVpc, createDefaultIsolatedVpcProps, AddAwsServiceEndpoint } from './vpcUtils';
-import {buildVpc} from "../../../../lib/common/helpers/vpc-helper";
-import {AddAwsServiceEndpoint, createDefaultIsolatedVpcProps} from "../../../../lib/common/helpers/kendra-helper";
-import {ServiceEndpointTypeEnum} from "../../../../lib/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/types";
-import {Match, Template} from "aws-cdk-lib/assertions";
+import { buildVpc, AddAwsServiceEndpoint, createDefaultIsolatedVpcProps } from '../../../../src/common/helpers/vpc-helper';
+import { ServiceEndpointTypeEnum } from '../../../../src/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/types';
 
 describe('VPC Utilities', () => {
   let app: App;
@@ -23,18 +33,18 @@
       const template = Template.fromStack(stack);
       template.resourceCountIs('AWS::EC2::VPC', 1);
       template.hasResourceProperties('AWS::EC2::VPC', {
-        CidrBlock: '10.0.0.0/16'
+        CidrBlock: '10.0.0.0/16',
       });
 
       // Assert subnets are created as expected
       template.hasResourceProperties('AWS::EC2::Subnet', {
-        CidrBlock: Match.stringLikeRegexp("^10\\.0\\.[0-9]+\\.0/24$"),
+        CidrBlock: Match.stringLikeRegexp('^10\\.0\\.[0-9]+\\.0/24$'),
         MapPublicIpOnLaunch: false,
         VpcId: Match.anyValue(), // Use anyValue if you're not asserting the exact VPC ID
         // If you need to assert on Tags, ensure they match the expected structure
         Tags: Match.arrayWith([
-          Match.objectLike({ Key: "aws-cdk:subnet-name", Value: "isolated" })
-        ])
+          Match.objectLike({ Key: 'aws-cdk:subnet-name', Value: 'isolated' }),
+        ]),
       });
     });
 
@@ -49,9 +59,9 @@
       template.hasResourceProperties('AWS::EC2::VPCEndpoint', {
         VpcId: {},
         ServiceName: {
-          'Fn::Join': ['', ['com.amazonaws.', { Ref: 'AWS::Region' }, '.dynamodb']]
+          'Fn::Join': ['', ['com.amazonaws.', { Ref: 'AWS::Region' }, '.dynamodb']],
         },
-        VpcEndpointType: 'Gateway'
+        VpcEndpointType: 'Gateway',
       });
     });
   });
Index: test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/base-class.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/base-class.test.ts b/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/base-class.test.ts
--- a/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/base-class.test.ts	(revision 227561dd4a31b6367a8cf725366b3c47bcc71465)
+++ b/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/base-class.test.ts	(date 1711971883210)
@@ -1,86 +1,100 @@
-import {Duration, Stack} from 'aws-cdk-lib';
+/**
+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
+ *  with the License. A copy of the License is located at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
+ *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
+ *  and limitations under the License.
+ */
+import * as path from 'path';
+import { Duration, Stack } from 'aws-cdk-lib';
+import { Role, ServicePrincipal } from 'aws-cdk-lib/aws-iam';
 import * as lambda from 'aws-cdk-lib/aws-lambda';
-import {BaseClass, BaseClassProps, ConstructName} from "../../../../lib";
-import {Construct} from "constructs";
-import * as path from "path";
-import {Role, ServicePrincipal} from "aws-cdk-lib/aws-iam";
-import {Function, Code, Runtime} from "aws-cdk-lib/aws-lambda";
+import { Function, Code, Runtime } from 'aws-cdk-lib/aws-lambda';
+import { Construct } from 'constructs';
+import { BaseClass, BaseClassProps, ConstructName } from '../../../../src';
 
 describe('BaseClass', () => {
-    let stack: Stack;
+  let stack: Stack;
 
-    beforeEach(() => {
-        stack = new Stack();
-    });
+  beforeEach(() => {
+    stack = new Stack();
+  });
 
-    it('should instantiate with default properties', () => {
-        const baseClass = new BaseClass(stack, 'BaseClassTest');
+  it('should instantiate with default properties', () => {
+    const baseClass = new BaseClass(stack, 'BaseClassTest');
 
-        // expect(baseClass.stage).toBe('-dev');
-        expect(baseClass.lambdaTracing).toBe(lambda.Tracing.ACTIVE);
-        expect(baseClass.enablexray).toBe(true);
-    });
+    // expect(baseClass.stage).toBe('-dev');
+    expect(baseClass.lambdaTracing).toBe(lambda.Tracing.ACTIVE);
+    expect(baseClass.enablexray).toBe(true);
+  });
 
-    it('should update environment suffix', () => {
-        class TestClass extends BaseClass {
-            constructor(scope: Construct, id: string, props: BaseClassProps) {
-                super(scope, id);
-                this.updateEnvSuffix(props);
-            }
-        }
+  it('should update environment suffix', () => {
+    class TestClass extends BaseClass {
+      constructor(scope: Construct, id: string, props: BaseClassProps) {
+        super(scope, id);
+        this.updateEnvSuffix(props);
+      }
+    }
 
-        const testClass = new TestClass(stack, 'Test', { stage: '-prod', constructName: ConstructName.AWSRAGAPPSYNCSTEPFNOPENSEARCH, constructId: '1' });
-        expect(testClass.stage).toBe('-prod');
-    });
+    const testClass = new TestClass(stack, 'Test', { stage: '-prod', constructName: ConstructName.AWSRAGAPPSYNCSTEPFNOPENSEARCH, constructId: '1' });
+    expect(testClass.stage).toBe('-prod');
+  });
 
-    it('should update construct usage metric code', () => {
-        class TestClass extends BaseClass {
-            constructor(scope: Construct, id: string, props: BaseClassProps, lambdaFunctions: lambda.DockerImageFunction[]) {
-                super(scope, id);
-                this.updateConstructUsageMetricCode(props, scope, lambdaFunctions);
-            }
-        }
-        const cdkStack = new Stack();
+  it('should update construct usage metric code', () => {
+    class TestClass extends BaseClass {
+      constructor(scope: Construct, id: string, props: BaseClassProps, lambdaFunctions: lambda.DockerImageFunction[]) {
+        super(scope, id);
+        this.updateConstructUsageMetricCode(props, scope, lambdaFunctions);
+      }
+    }
+    const cdkStack = new Stack();
 
-        let startDataSyncRole = new Role(cdkStack, 'startDataSyncRole', {
-            description: 'Role used by the Document Status Update Lambda function',
-            assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
-        });
+    let startDataSyncRole = new Role(cdkStack, 'startDataSyncRole', {
+      description: 'Role used by the Document Status Update Lambda function',
+      assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
+    });
 
-        const lambdaFunction = new Function(cdkStack, 'kendraStartDataSync', {
-            runtime: Runtime.PYTHON_3_10,
-            handler: 'start_sync.lambda_handler',
-            code: Code.fromAsset(path.join(__dirname, '../../../../lambda/aws-rag-appsync-stepfn-kendra/kendra_sync/')),
-            timeout: Duration.seconds(30),
-            role: startDataSyncRole,
-            environment: {
-                KENDRA_INDEX_ID: "123",
-                KENDRA_DATA_SOURCE_INDEX_ID: "123",
-                DOCUMENTS_TABLE: "tableName",
-            },
-        });
+    const lambdaFunction = new Function(cdkStack, 'kendraStartDataSync', {
+      runtime: Runtime.PYTHON_3_10,
+      handler: 'start_sync.lambda_handler',
+      code: Code.fromAsset(path.join(__dirname, '../../../../lambda/aws-rag-appsync-stepfn-kendra/kendra_sync/')),
+      timeout: Duration.seconds(30),
+      role: startDataSyncRole,
+      environment: {
+        KENDRA_INDEX_ID: '123',
+        KENDRA_DATA_SOURCE_INDEX_ID: '123',
+        DOCUMENTS_TABLE: 'tableName',
+      },
+    });
 
-        new TestClass(stack, 'Test', { enableOperationalMetric: true,
-            constructName: ConstructName.AWSRAGAPPSYNCSTEPFNOPENSEARCH,
-            constructId: '1' },
-            [lambdaFunction]);
+    new TestClass(stack, 'Test', {
+      enableOperationalMetric: true,
+      constructName: ConstructName.AWSRAGAPPSYNCSTEPFNOPENSEARCH,
+      constructId: '1',
+    },
+    [lambdaFunction]);
 
-        const expectedPattern = /\(usage id :uksb-1tupboc45\)\(version:0\.0\.0\) \(constructs :::\{"C1":1,"C2":0,"C3":0,"C4":0,"C5":0,"C6":0,"C7":0,"C8":0\}\) /;
-        expect(stack.templateOptions.description).toMatch(expectedPattern);
+    const expectedPattern = /Description:\s+\(uksb-1tupboc45\)\s+\(version:0\.0\.0\)\s+\(tag:(C1:1,C2:0,C3:0,C4:0,C5:0,C6:0,C7:0,C8:0)\)/;
+    expect(stack.templateOptions.description).toMatch(expectedPattern);
 
-    });
+  });
 
-    it('should add observability to construct', () => {
-        class TestClass extends BaseClass {
-            constructor(scope: Construct, id: string, props: BaseClassProps) {
-                super(scope, id);
-                this.addObservabilityToConstruct(props);
-            }
-        }
+  it('should add observability to construct', () => {
+    class TestClass extends BaseClass {
+      constructor(scope: Construct, id: string, props: BaseClassProps) {
+        super(scope, id);
+        this.addObservabilityToConstruct(props);
+      }
+    }
 
-        const testClass = new TestClass(stack, 'Test',
-            { observability: false, constructName: ConstructName.AWSRAGAPPSYNCSTEPFNOPENSEARCH, constructId: '1' });
-        expect(testClass.enablexray).toBe(false);
-        expect(testClass.lambdaTracing).toBe(lambda.Tracing.DISABLED);
-    });
+    const testClass = new TestClass(stack, 'Test',
+      { observability: false, constructName: ConstructName.AWSRAGAPPSYNCSTEPFNOPENSEARCH, constructId: '1' });
+    expect(testClass.enablexray).toBe(false);
+    expect(testClass.lambdaTracing).toBe(lambda.Tracing.DISABLED);
+  });
 });
Index: test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/iam-helper.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/iam-helper.test.ts b/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/iam-helper.test.ts
--- a/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/iam-helper.test.ts	(revision 227561dd4a31b6367a8cf725366b3c47bcc71465)
+++ b/test/patterns/gen-ai/aws-rag-appsync-stepfn-kendra/iam-helper.test.ts	(date 1711974308188)
@@ -1,56 +1,68 @@
-import {Stack} from 'aws-cdk-lib';
-import {addRolePolicies, createIAMRoleWithBasicExecutionPolicy} from "../../../../src/common/helpers/iam-roles-helper";
-import {Match, Template} from "aws-cdk-lib/assertions";
+/**
+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
+ *  with the License. A copy of the License is located at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
+ *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
+ *  and limitations under the License.
+ */
+import { Stack } from 'aws-cdk-lib';
+import { Match, Template } from 'aws-cdk-lib/assertions';
+import { addRolePolicies, createIAMRoleWithBasicExecutionPolicy } from '../../../../src/common/helpers/iam-roles-helper';
 
 describe('iam-roles-helper', () => {
-    describe('createIAMRoleWithBasicExecutionPolicy', () => {
-        it('creates an IAM role with a basic execution policy', () => {
-            const stack = new Stack();
-            const roleId = 'TestRole';
-            const roleDescription = 'Test Description';
+  describe('createIAMRoleWithBasicExecutionPolicy', () => {
+    it('creates an IAM role with a basic execution policy', () => {
+      const stack = new Stack();
+      const roleId = 'TestRole';
+      const roleDescription = 'Test Description';
 
-            createIAMRoleWithBasicExecutionPolicy(stack, roleId, roleDescription);
+      createIAMRoleWithBasicExecutionPolicy(stack, roleId, roleDescription);
 
-            const template = Template.fromStack(stack);
+      const template = Template.fromStack(stack);
 
-            template.hasResourceProperties('AWS::IAM::Role', {
-                Description: roleDescription,
-                AssumeRolePolicyDocument: Match.objectLike({
-                    Statement: [
-                        {
-                            Action: 'sts:AssumeRole',
-                            Effect: 'Allow',
-                            Principal: {Service: 'lambda.amazonaws.com'},
-                        },
-                    ],
-                }),
-            });
+      template.hasResourceProperties('AWS::IAM::Role', {
+        Description: roleDescription,
+        AssumeRolePolicyDocument: Match.objectLike({
+          Statement: [
+            {
+              Action: 'sts:AssumeRole',
+              Effect: 'Allow',
+              Principal: { Service: 'lambda.amazonaws.com' },
+            },
+          ],
+        }),
+      });
 
-        });
-    });
-    describe('addRolePolicies', () => {
-        it('adds policy statements to the IAM role', () => {
-            const stack = new Stack();
-            const role = createIAMRoleWithBasicExecutionPolicy(stack, 'TestRole', 'Test Description');
+    });
+  });
+  describe('addRolePolicies', () => {
+    it('adds policy statements to the IAM role', () => {
+      const stack = new Stack();
+      const role = createIAMRoleWithBasicExecutionPolicy(stack, 'TestRole', 'Test Description');
 
-            addRolePolicies(role, [{
-                actions: ['s3:GetObject'],
-                resources: ['arn:aws:s3:::example-bucket/*'],
-            }]);
+      addRolePolicies(role, [{
+        actions: ['s3:GetObject'],
+        resources: ['arn:aws:s3:::example-bucket/*'],
+      }]);
 
-            const template = Template.fromStack(stack);
+      const template = Template.fromStack(stack);
 
-            template.hasResourceProperties('AWS::IAM::Policy', {
-                PolicyDocument: Match.objectLike({
-                    Statement: [
-                        {
-                            Action: 's3:GetObject',
-                            Effect: 'Allow',
-                            Resource: 'arn:aws:s3:::example-bucket/*',
-                        },
-                    ],
-                }),
-            });
-        });
-    });
-});
\ No newline at end of file
+      template.hasResourceProperties('AWS::IAM::Policy', {
+        PolicyDocument: Match.objectLike({
+          Statement: [
+            {
+              Action: 's3:GetObject',
+              Effect: 'Allow',
+              Resource: 'arn:aws:s3:::example-bucket/*',
+            },
+          ],
+        }),
+      });
+    });
+  });
+});
