{
 "Resources": {
  "testLogBucketKey32CC4D1D": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "EnableKeyRotation": true,
    "KeyPolicy": {
     "Statement": [
      {
       "Action": "kms:*",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       },
       "Resource": "*"
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:Encrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": "logging.s3.amazonaws.com"
       },
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "testLogBucket7F298F3B": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "AccessControl": "LogDeliveryWrite",
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "BucketKeyEnabled": true,
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::GetAtt": [
          "testLogBucketKey32CC4D1D",
          "Arn"
         ]
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "ObjectLockConfiguration": {
     "ObjectLockEnabled": "Enabled",
     "Rule": {
      "DefaultRetention": {
       "Days": 1,
       "Mode": "GOVERNANCE"
      }
     }
    },
    "ObjectLockEnabled": true,
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "ObjectWriter"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "There is no need to enable access logging for the AccessLogs bucket.",
       "id": "AwsSolutions-S1"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testLogBucketPolicy8C5750D7": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "testLogBucket7F298F3B"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testLogBucket7F298F3B",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testLogBucket7F298F3B",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testLogBucket7F298F3B",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testLogBucket7F298F3B",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "There is no need to enable access logging for the AccessLogs bucket.",
       "id": "AwsSolutions-S1"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testLogBucketAutoDeleteObjectsCustomResource14E7FB3C": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "testLogBucket7F298F3B"
    }
   },
   "DependsOn": [
    "testLogBucketPolicy8C5750D7"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "There is no need to enable access logging for the AccessLogs bucket.",
       "id": "AwsSolutions-S1"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testOutput66980038": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "BucketKeyEnabled": true,
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::GetAtt": [
          "testLogBucketKey32CC4D1D",
          "Arn"
         ]
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "AbortIncompleteMultipartUpload": {
        "DaysAfterInitiation": 1
       },
       "Id": "AbortIncompleteMultipartUpload",
       "Status": "Enabled"
      }
     ]
    },
    "LoggingConfiguration": {
     "DestinationBucketName": {
      "Ref": "testLogBucket7F298F3B"
     },
     "LogFilePrefix": "output-bucket-access-logs"
    },
    "ObjectLockConfiguration": {
     "ObjectLockEnabled": "Enabled",
     "Rule": {
      "DefaultRetention": {
       "Days": 1,
       "Mode": "GOVERNANCE"
      }
     }
    },
    "ObjectLockEnabled": true,
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testOutputPolicy4B2D7F76": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "testOutput66980038"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testOutput66980038",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testOutput66980038",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testOutput66980038",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testOutput66980038",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testOutputAutoDeleteObjectsCustomResource019BF1CF": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "testOutput66980038"
    }
   },
   "DependsOn": [
    "testOutputPolicy4B2D7F76"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testCircuitBreaker564CBB3F": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Type": "String",
    "Value": "False"
   }
  },
  "testDeadLetterQueueA5F7D72D": {
   "Type": "AWS::SQS::Queue",
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "testDeadLetterQueuePolicy14C080A7": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": {
        "Fn::GetAtt": [
         "testDeadLetterQueueA5F7D72D",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "testDeadLetterQueueA5F7D72D"
     }
    ]
   }
  },
  "testQueueA1A031F3": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "testDeadLetterQueueA5F7D72D",
       "Arn"
      ]
     },
     "maxReceiveCount": 3
    },
    "VisibilityTimeout": 300
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "testQueuePolicy2FC53456": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": {
        "Fn::GetAtt": [
         "testQueueA1A031F3",
         "Arn"
        ]
       }
      },
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "testTopic20AA7407"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "testQueueA1A031F3",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "testQueueA1A031F3"
     }
    ]
   }
  },
  "testQueueawsllamaindexdataloaderintegtestTopic13943F88EC3EDAB2": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "testQueueA1A031F3",
      "Arn"
     ]
    },
    "Protocol": "sqs",
    "TopicArn": {
     "Ref": "testTopic20AA7407"
    }
   },
   "DependsOn": [
    "testQueuePolicy2FC53456"
   ]
  },
  "testClusterE41B7119": {
   "Type": "AWS::ECS::Cluster",
   "Properties": {
    "ClusterSettings": [
     {
      "Name": "containerInsights",
      "Value": "enabled"
     }
    ]
   }
  },
  "testClusterVpc0A7EFC4B": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc"
     }
    ]
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet1SubnetC8224979": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet1RouteTable95F06E01": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet1RouteTableAssociation84B5DA23": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "testClusterVpcPublicSubnet1RouteTable95F06E01"
    },
    "SubnetId": {
     "Ref": "testClusterVpcPublicSubnet1SubnetC8224979"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet1DefaultRouteF4ABA912": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "testClusterVpcIGWAAAC5F13"
    },
    "RouteTableId": {
     "Ref": "testClusterVpcPublicSubnet1RouteTable95F06E01"
    }
   },
   "DependsOn": [
    "testClusterVpcVPCGWF6B79041"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet1EIP5C9D39EB": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet1NATGateway754A80BD": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "testClusterVpcPublicSubnet1EIP5C9D39EB",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "testClusterVpcPublicSubnet1SubnetC8224979"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "testClusterVpcPublicSubnet1DefaultRouteF4ABA912",
    "testClusterVpcPublicSubnet1RouteTableAssociation84B5DA23"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet2SubnetF8C60632": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet2RouteTable0DE2163B": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet2RouteTableAssociation9B22B47D": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "testClusterVpcPublicSubnet2RouteTable0DE2163B"
    },
    "SubnetId": {
     "Ref": "testClusterVpcPublicSubnet2SubnetF8C60632"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet2DefaultRouteC2E8FD46": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "testClusterVpcIGWAAAC5F13"
    },
    "RouteTableId": {
     "Ref": "testClusterVpcPublicSubnet2RouteTable0DE2163B"
    }
   },
   "DependsOn": [
    "testClusterVpcVPCGWF6B79041"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet2EIP1F54B40A": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PublicSubnet2"
     }
    ]
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPublicSubnet2NATGateway58CC8B29": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "testClusterVpcPublicSubnet2EIP1F54B40A",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "testClusterVpcPublicSubnet2SubnetF8C60632"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PublicSubnet2"
     }
    ]
   },
   "DependsOn": [
    "testClusterVpcPublicSubnet2DefaultRouteC2E8FD46",
    "testClusterVpcPublicSubnet2RouteTableAssociation9B22B47D"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPrivateSubnet1SubnetD8A3DD84": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPrivateSubnet1RouteTableAB209658": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPrivateSubnet1RouteTableAssociation707F217E": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "testClusterVpcPrivateSubnet1RouteTableAB209658"
    },
    "SubnetId": {
     "Ref": "testClusterVpcPrivateSubnet1SubnetD8A3DD84"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPrivateSubnet1DefaultRouteB2722C76": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "testClusterVpcPublicSubnet1NATGateway754A80BD"
    },
    "RouteTableId": {
     "Ref": "testClusterVpcPrivateSubnet1RouteTableAB209658"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPrivateSubnet2Subnet9652B709": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPrivateSubnet2RouteTableA45C2A3F": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPrivateSubnet2RouteTableAssociation63F1ABBF": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "testClusterVpcPrivateSubnet2RouteTableA45C2A3F"
    },
    "SubnetId": {
     "Ref": "testClusterVpcPrivateSubnet2Subnet9652B709"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcPrivateSubnet2DefaultRoute6882F728": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "testClusterVpcPublicSubnet2NATGateway58CC8B29"
    },
    "RouteTableId": {
     "Ref": "testClusterVpcPrivateSubnet2RouteTableA45C2A3F"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcIGWAAAC5F13": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc"
     }
    ]
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcVPCGWF6B79041": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "testClusterVpcIGWAAAC5F13"
    },
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testClusterVpcFlowLog9503638E": {
   "Type": "AWS::EC2::FlowLog",
   "Properties": {
    "LogDestination": {
     "Fn::Join": [
      "",
      [
       {
        "Fn::GetAtt": [
         "testLogBucket7F298F3B",
         "Arn"
        ]
       },
       "/vpc-flow-logs"
      ]
     ]
    },
    "LogDestinationType": "s3",
    "ResourceId": {
     "Ref": "testClusterVpc0A7EFC4B"
    },
    "ResourceType": "VPC",
    "Tags": [
     {
      "Key": "Name",
      "Value": "aws-llama-index-data-loader-integ-test/test/Cluster/Vpc/FlowLog"
     }
    ],
    "TrafficType": "ALL"
   },
   "DependsOn": [
    "testLogBucketAutoDeleteObjectsCustomResource14E7FB3C",
    "testLogBucketPolicy8C5750D7"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled"
      },
      {
       "reason": "default vpc creation",
       "id": "HIPAA.Security-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW"
      },
      {
       "reason": "default vpc creation",
       "id": "PCI.DSS.321-VPCNoUnrestrictedRouteToIGW"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingTaskDefTaskRoleBB1E3493": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      },
      {
       "reason": "The ecr:GetAuthorizationToken requires \"*\"",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*",
        "Resource::<Raw72517081.Arn>/*",
        "Resource::<OutputAB65CDDE.Arn>/*"
       ]
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "HIPAA.Security-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "NIST.800.53.R4-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "NIST.800.53.R5-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "PCI.DSS.321-IAMNoInlinePolicy"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:ReceiveMessage",
        "sqs:ChangeMessageVisibility",
        "sqs:GetQueueUrl",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "testQueueA1A031F3",
         "Arn"
        ]
       }
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "testRawB02F8A9B",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testRawB02F8A9B",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "kms:Decrypt",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "testLogBucketKey32CC4D1D",
         "Arn"
        ]
       }
      },
      {
       "Action": "kms:GenerateDataKey",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "testLogBucketKey32CC4D1D",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ssm:DescribeParameters",
        "ssm:GetParameters",
        "ssm:GetParameter",
        "ssm:GetParameterHistory"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ssm:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":parameter/",
          {
           "Ref": "testCircuitBreaker564CBB3F"
          }
         ]
        ]
       }
      },
      {
       "Action": "s3:PutObject",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "testOutput66980038",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testOutput66980038",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C",
    "Roles": [
     {
      "Ref": "testServiceQueueProcessingTaskDefTaskRoleBB1E3493"
     }
    ]
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      },
      {
       "reason": "The ecr:GetAuthorizationToken requires \"*\"",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*",
        "Resource::<Raw72517081.Arn>/*",
        "Resource::<OutputAB65CDDE.Arn>/*"
       ]
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "HIPAA.Security-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "NIST.800.53.R4-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "NIST.800.53.R5-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "PCI.DSS.321-IAMNoInlinePolicy"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingTaskDefA998758D": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "CIRCUIT_BREAKER_SSM_PARAMETER_NAME",
        "Value": {
         "Ref": "testCircuitBreaker564CBB3F"
        }
       },
       {
        "Name": "LOGGING_LEVEL",
        "Value": "WARNING"
       },
       {
        "Name": "BUCKET_NAME",
        "Value": {
         "Ref": "testOutput66980038"
        }
       },
       {
        "Name": "QUEUE_NAME",
        "Value": {
         "Fn::GetAtt": [
          "testQueueA1A031F3",
          "QueueName"
         ]
        }
       }
      ],
      "Essential": true,
      "HealthCheck": {
       "Command": [
        "CMD-SHELL",
        "/usr/src/app/healthcheck.sh"
       ],
       "Interval": 30,
       "Retries": 3,
       "StartPeriod": 5,
       "Timeout": 30
      },
      "Image": {
       "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:dbdfbc71da28e53c4e106883b62a14fd19bbe4d7e6dfa907f9454b8f3e2360f1"
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "testServiceQueueProcessingTaskDefQueueProcessingContainerLogGroupD7294126"
        },
        "awslogs-stream-prefix": "Service",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "QueueProcessingContainer"
     }
    ],
    "Cpu": "256",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "testServiceQueueProcessingTaskDefExecutionRole95E572DA",
      "Arn"
     ]
    },
    "Family": "awsllamaindexdataloaderintegtestServiceQueueProcessingTaskDefFCE41A75",
    "Memory": "2048",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "testServiceQueueProcessingTaskDefTaskRoleBB1E3493",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      },
      {
       "reason": "The ecr:GetAuthorizationToken requires \"*\"",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*",
        "Resource::<Raw72517081.Arn>/*",
        "Resource::<OutputAB65CDDE.Arn>/*"
       ]
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingTaskDefQueueProcessingContainerLogGroupD7294126": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      },
      {
       "reason": "The ecr:GetAuthorizationToken requires \"*\"",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*",
        "Resource::<Raw72517081.Arn>/*",
        "Resource::<OutputAB65CDDE.Arn>/*"
       ]
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingTaskDefExecutionRole95E572DA": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      },
      {
       "reason": "The ecr:GetAuthorizationToken requires \"*\"",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*",
        "Resource::<Raw72517081.Arn>/*",
        "Resource::<OutputAB65CDDE.Arn>/*"
       ]
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "HIPAA.Security-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "NIST.800.53.R4-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "NIST.800.53.R5-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "PCI.DSS.321-IAMNoInlinePolicy"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingTaskDefExecutionRoleDefaultPolicy45353975": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ecr:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":repository/",
          {
           "Fn::Sub": "cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}"
          }
         ]
        ]
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "testServiceQueueProcessingTaskDefQueueProcessingContainerLogGroupD7294126",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "testServiceQueueProcessingTaskDefExecutionRoleDefaultPolicy45353975",
    "Roles": [
     {
      "Ref": "testServiceQueueProcessingTaskDefExecutionRole95E572DA"
     }
    ]
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      },
      {
       "reason": "The ecr:GetAuthorizationToken requires \"*\"",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*",
        "Resource::<Raw72517081.Arn>/*",
        "Resource::<OutputAB65CDDE.Arn>/*"
       ]
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "HIPAA.Security-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "NIST.800.53.R4-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "NIST.800.53.R5-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are acceptable for this use case.",
       "id": "PCI.DSS.321-IAMNoInlinePolicy"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupEncrypted"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "HIPAA.Security-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R4-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod"
      },
      {
       "reason": "CloudWatch logging is not encrypted",
       "id": "PCI.DSS.321-CloudWatchLogGroupRetentionPeriod"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingFargateService288F5A76": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "testClusterE41B7119"
    },
    "DeploymentConfiguration": {
     "Alarms": {
      "AlarmNames": [],
      "Enable": false,
      "Rollback": false
     },
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "EnableECSManagedTags": false,
    "LaunchType": "FARGATE",
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "testServiceQueueProcessingFargateServiceSecurityGroup84A3E440",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "testClusterVpcPrivateSubnet1SubnetD8A3DD84"
       },
       {
        "Ref": "testClusterVpcPrivateSubnet2Subnet9652B709"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "testServiceQueueProcessingTaskDefA998758D"
    }
   },
   "DependsOn": [
    "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C",
    "testServiceQueueProcessingTaskDefTaskRoleBB1E3493"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingFargateServiceSecurityGroup84A3E440": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "aws-llama-index-data-loader-integ-test/test/Service/QueueProcessingFargateService/SecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "testClusterVpc0A7EFC4B"
    }
   },
   "DependsOn": [
    "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C",
    "testServiceQueueProcessingTaskDefTaskRoleBB1E3493"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingFargateServiceTaskCountTarget359EAD66": {
   "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
   "Properties": {
    "MaxCapacity": 10,
    "MinCapacity": 0,
    "ResourceId": {
     "Fn::Join": [
      "",
      [
       "service/",
       {
        "Ref": "testClusterE41B7119"
       },
       "/",
       {
        "Fn::GetAtt": [
         "testServiceQueueProcessingFargateService288F5A76",
         "Name"
        ]
       }
      ]
     ]
    },
    "RoleARN": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":iam::",
       {
        "Ref": "AWS::AccountId"
       },
       ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ]
     ]
    },
    "ScalableDimension": "ecs:service:DesiredCount",
    "ServiceNamespace": "ecs"
   },
   "DependsOn": [
    "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C",
    "testServiceQueueProcessingTaskDefTaskRoleBB1E3493"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingFargateServiceTaskCountTargetCpuScalingDA2C4394": {
   "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
   "Properties": {
    "PolicyName": "awsllamaindexdataloaderintegtestServiceQueueProcessingFargateServiceTaskCountTargetCpuScalingE026A7FA",
    "PolicyType": "TargetTrackingScaling",
    "ScalingTargetId": {
     "Ref": "testServiceQueueProcessingFargateServiceTaskCountTarget359EAD66"
    },
    "TargetTrackingScalingPolicyConfiguration": {
     "PredefinedMetricSpecification": {
      "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
     },
     "TargetValue": 50
    }
   },
   "DependsOn": [
    "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C",
    "testServiceQueueProcessingTaskDefTaskRoleBB1E3493"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingFargateServiceTaskCountTargetQueueMessagesVisibleScalingLowerPolicy459B950A": {
   "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
   "Properties": {
    "PolicyName": "awsllamaindexdataloaderintegtestServiceQueueProcessingFargateServiceTaskCountTargetQueueMessagesVisibleScalingLowerPolicy60563297",
    "PolicyType": "StepScaling",
    "ScalingTargetId": {
     "Ref": "testServiceQueueProcessingFargateServiceTaskCountTarget359EAD66"
    },
    "StepScalingPolicyConfiguration": {
     "AdjustmentType": "ChangeInCapacity",
     "MetricAggregationType": "Maximum",
     "StepAdjustments": [
      {
       "MetricIntervalUpperBound": 0,
       "ScalingAdjustment": -1
      }
     ]
    }
   },
   "DependsOn": [
    "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C",
    "testServiceQueueProcessingTaskDefTaskRoleBB1E3493"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingFargateServiceTaskCountTargetQueueMessagesVisibleScalingLowerAlarm07FF0B76": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "AlarmActions": [
     {
      "Ref": "testServiceQueueProcessingFargateServiceTaskCountTargetQueueMessagesVisibleScalingLowerPolicy459B950A"
     }
    ],
    "AlarmDescription": "Lower threshold scaling alarm",
    "ComparisonOperator": "LessThanOrEqualToThreshold",
    "Dimensions": [
     {
      "Name": "QueueName",
      "Value": {
       "Fn::GetAtt": [
        "testQueueA1A031F3",
        "QueueName"
       ]
      }
     }
    ],
    "EvaluationPeriods": 1,
    "MetricName": "ApproximateNumberOfMessagesVisible",
    "Namespace": "AWS/SQS",
    "Period": 300,
    "Statistic": "Maximum",
    "Threshold": 0
   },
   "DependsOn": [
    "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C",
    "testServiceQueueProcessingTaskDefTaskRoleBB1E3493"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingFargateServiceTaskCountTargetQueueMessagesVisibleScalingUpperPolicy7C58C4AB": {
   "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
   "Properties": {
    "PolicyName": "awsllamaindexdataloaderintegtestServiceQueueProcessingFargateServiceTaskCountTargetQueueMessagesVisibleScalingUpperPolicyB35BAAEC",
    "PolicyType": "StepScaling",
    "ScalingTargetId": {
     "Ref": "testServiceQueueProcessingFargateServiceTaskCountTarget359EAD66"
    },
    "StepScalingPolicyConfiguration": {
     "AdjustmentType": "ChangeInCapacity",
     "MetricAggregationType": "Maximum",
     "StepAdjustments": [
      {
       "MetricIntervalLowerBound": 0,
       "MetricIntervalUpperBound": 99,
       "ScalingAdjustment": 1
      },
      {
       "MetricIntervalLowerBound": 99,
       "MetricIntervalUpperBound": 499,
       "ScalingAdjustment": 1
      },
      {
       "MetricIntervalLowerBound": 499,
       "ScalingAdjustment": 5
      }
     ]
    }
   },
   "DependsOn": [
    "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C",
    "testServiceQueueProcessingTaskDefTaskRoleBB1E3493"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "testServiceQueueProcessingFargateServiceTaskCountTargetQueueMessagesVisibleScalingUpperAlarm2A34497B": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "AlarmActions": [
     {
      "Ref": "testServiceQueueProcessingFargateServiceTaskCountTargetQueueMessagesVisibleScalingUpperPolicy7C58C4AB"
     }
    ],
    "AlarmDescription": "Upper threshold scaling alarm",
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "Dimensions": [
     {
      "Name": "QueueName",
      "Value": {
       "Fn::GetAtt": [
        "testQueueA1A031F3",
        "QueueName"
       ]
      }
     }
    ],
    "EvaluationPeriods": 1,
    "MetricName": "ApproximateNumberOfMessagesVisible",
    "Namespace": "AWS/SQS",
    "Period": 300,
    "Statistic": "Maximum",
    "Threshold": 1
   },
   "DependsOn": [
    "testServiceQueueProcessingTaskDefTaskRoleDefaultPolicyA2314C2C",
    "testServiceQueueProcessingTaskDefTaskRoleBB1E3493"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Environmental variables are okay",
       "id": "AwsSolutions-ECS2"
      }
     ]
    }
   }
  },
  "testRawB02F8A9B": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "BucketKeyEnabled": true,
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::GetAtt": [
          "testLogBucketKey32CC4D1D",
          "Arn"
         ]
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "AbortIncompleteMultipartUpload": {
        "DaysAfterInitiation": 1
       },
       "Id": "AbortIncompleteMultipartUpload",
       "Status": "Enabled"
      }
     ]
    },
    "LoggingConfiguration": {
     "DestinationBucketName": {
      "Ref": "testLogBucket7F298F3B"
     },
     "LogFilePrefix": "raw-bucket-access-logs"
    },
    "ObjectLockConfiguration": {
     "ObjectLockEnabled": "Enabled",
     "Rule": {
      "DefaultRetention": {
       "Days": 1,
       "Mode": "GOVERNANCE"
      }
     }
    },
    "ObjectLockEnabled": true,
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testRawPolicy5CC638A9": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "testRawB02F8A9B"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testRawB02F8A9B",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testRawB02F8A9B",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "testRawB02F8A9B",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "testRawB02F8A9B",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testRawAutoDeleteObjectsCustomResource75A03DE7": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "testRawB02F8A9B"
    }
   },
   "DependsOn": [
    "testRawPolicy5CC638A9"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testRawNotificationsE49FC2F5": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "testRawB02F8A9B"
    },
    "NotificationConfiguration": {
     "TopicConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "TopicArn": {
        "Ref": "testTopic20AA7407"
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "testRawPolicy5CC638A9",
    "testTopicPolicy6FF7D7A8",
    "testTopic20AA7407"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "HIPAA.Security-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R4-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "NIST.800.53.R5-S3BucketReplicationEnabled"
      },
      {
       "reason": "Replication for this use case is uneccessary.",
       "id": "PCI.DSS.321-S3BucketReplicationEnabled"
      }
     ]
    }
   }
  },
  "testTopicKey6AD3C1A9": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "EnableKeyRotation": true,
    "KeyPolicy": {
     "Statement": [
      {
       "Action": "kms:*",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       },
       "Resource": "*"
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "testTopic20AA7407": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "KmsMasterKeyId": {
     "Fn::GetAtt": [
      "testTopicKey6AD3C1A9",
      "Arn"
     ]
    }
   }
  },
  "testTopicPolicy6FF7D7A8": {
   "Type": "AWS::SNS::TopicPolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Ref": "testTopic20AA7407"
       },
       "Sid": "0"
      },
      {
       "Action": "sns:Publish",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": "*",
       "Resource": {
        "Ref": "testTopic20AA7407"
       },
       "Sid": "AllowPublishThroughSSLOnly"
      },
      {
       "Action": "sns:Publish",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "testRawB02F8A9B",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Ref": "testTopic20AA7407"
       },
       "Sid": "2"
      }
     ],
     "Version": "2012-10-17"
    },
    "Topics": [
     {
      "Ref": "testTopic20AA7407"
     }
    ]
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::FindInMap": [
      "LatestNodeRuntimeMap",
      {
       "Ref": "AWS::Region"
      },
      "value"
     ]
    },
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "testLogBucket7F298F3B"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ]
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "AWSLambdaBasicExecutionRole is used by `addEventNotification`",
       "id": "AwsSolutions-IAM4",
       "applies_to": [
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      },
      {
       "reason": "Suppress all AwsSolutions-IAM5 findings for this stack",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "HIPAA.Security-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "NIST.800.53.R4-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "NIST.800.53.R5-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "PCI.DSS.321-IAMNoInlinePolicy"
      }
     ]
    }
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "AWSLambdaBasicExecutionRole is used by `addEventNotification`",
       "id": "AwsSolutions-IAM4",
       "applies_to": [
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      },
      {
       "reason": "Suppress all AwsSolutions-IAM5 findings for this stack",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "HIPAA.Security-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "NIST.800.53.R4-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "NIST.800.53.R5-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "PCI.DSS.321-IAMNoInlinePolicy"
      }
     ]
    }
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "AWSLambdaBasicExecutionRole is used by `addEventNotification`",
       "id": "AwsSolutions-IAM4",
       "applies_to": [
        "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      },
      {
       "reason": "Suppress all AwsSolutions-IAM5 findings for this stack",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "HIPAA.Security-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "NIST.800.53.R4-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "NIST.800.53.R5-IAMNoInlinePolicy"
      },
      {
       "reason": "Inline policies are part of the BucketHandlerNotification",
       "id": "PCI.DSS.321-IAMNoInlinePolicy"
      }
     ]
    }
   }
  }
 },
 "Outputs": {
  "testServiceSQSQueue2827F52D": {
   "Value": {
    "Fn::GetAtt": [
     "testQueueA1A031F3",
     "QueueName"
    ]
   }
  },
  "testServiceSQSQueueArnCF38F668": {
   "Value": {
    "Fn::GetAtt": [
     "testQueueA1A031F3",
     "Arn"
    ]
   }
  }
 },
 "Mappings": {
  "LatestNodeRuntimeMap": {
   "af-south-1": {
    "value": "nodejs20.x"
   },
   "ap-east-1": {
    "value": "nodejs20.x"
   },
   "ap-northeast-1": {
    "value": "nodejs20.x"
   },
   "ap-northeast-2": {
    "value": "nodejs20.x"
   },
   "ap-northeast-3": {
    "value": "nodejs20.x"
   },
   "ap-south-1": {
    "value": "nodejs20.x"
   },
   "ap-south-2": {
    "value": "nodejs20.x"
   },
   "ap-southeast-1": {
    "value": "nodejs20.x"
   },
   "ap-southeast-2": {
    "value": "nodejs20.x"
   },
   "ap-southeast-3": {
    "value": "nodejs20.x"
   },
   "ap-southeast-4": {
    "value": "nodejs20.x"
   },
   "ap-southeast-5": {
    "value": "nodejs20.x"
   },
   "ap-southeast-7": {
    "value": "nodejs20.x"
   },
   "ca-central-1": {
    "value": "nodejs20.x"
   },
   "ca-west-1": {
    "value": "nodejs20.x"
   },
   "cn-north-1": {
    "value": "nodejs18.x"
   },
   "cn-northwest-1": {
    "value": "nodejs18.x"
   },
   "eu-central-1": {
    "value": "nodejs20.x"
   },
   "eu-central-2": {
    "value": "nodejs20.x"
   },
   "eu-isoe-west-1": {
    "value": "nodejs18.x"
   },
   "eu-north-1": {
    "value": "nodejs20.x"
   },
   "eu-south-1": {
    "value": "nodejs20.x"
   },
   "eu-south-2": {
    "value": "nodejs20.x"
   },
   "eu-west-1": {
    "value": "nodejs20.x"
   },
   "eu-west-2": {
    "value": "nodejs20.x"
   },
   "eu-west-3": {
    "value": "nodejs20.x"
   },
   "il-central-1": {
    "value": "nodejs20.x"
   },
   "me-central-1": {
    "value": "nodejs20.x"
   },
   "me-south-1": {
    "value": "nodejs20.x"
   },
   "mx-central-1": {
    "value": "nodejs20.x"
   },
   "sa-east-1": {
    "value": "nodejs20.x"
   },
   "us-east-1": {
    "value": "nodejs20.x"
   },
   "us-east-2": {
    "value": "nodejs20.x"
   },
   "us-gov-east-1": {
    "value": "nodejs18.x"
   },
   "us-gov-west-1": {
    "value": "nodejs18.x"
   },
   "us-iso-east-1": {
    "value": "nodejs18.x"
   },
   "us-iso-west-1": {
    "value": "nodejs18.x"
   },
   "us-isob-east-1": {
    "value": "nodejs18.x"
   },
   "us-west-1": {
    "value": "nodejs20.x"
   },
   "us-west-2": {
    "value": "nodejs20.x"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}