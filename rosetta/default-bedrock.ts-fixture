import { Construct } from 'constructs';
import * as cdk from 'aws-cdk-lib';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as kms from 'aws-cdk-lib/aws-kms';
import * as ecr from 'aws-cdk-lib/aws-ecr';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import { Platform } from 'aws-cdk-lib/aws-ecr-assets';
import * as genaicdk from '@cdklabs/generative-ai-cdk-constructs';

// Define path utilities for examples that use them
const path = {
  join: (...args: string[]) => args.join('/')
};

// Define __dirname for examples that use it
const __dirname = '/example/path';

// Define a stack which is used when mmultiple stacks are needed
let stack1: cdk.Stack;

class MyStack extends cdk.Stack {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    /// here
  }
}

// Initialize stack1 for examples that need it
const app = new cdk.App();
stack1 = new MyStack(app, 'Stack1');
